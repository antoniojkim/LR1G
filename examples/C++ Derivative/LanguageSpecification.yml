tokens:
 - ID:
    description: "a string consisting of any combination of letters (in the range a-z, A-Z), digits (in the range 0-9) as well as underscores ( _ ) with the exception that it may not start with a digit."
 - STR:
    description: "a string consisting of any combination of letters, digits, and symbols (e.g. $, âˆš)"
 - NUM:
    description: "a string consisting of only digits separated by at most one dot ( . ) at most one case insensitive \"e\" which must come after the dot."
 - LPAREN:
    lexeme: "("
 - RPAREN:
    lexeme: ")"
 - LSQUARE:
    lexeme: "["
 - RSQUARE:
    lexeme: "]"
 - LBRACE:
    lexeme: "{"
 - RBRACE:
    lexeme: "}"
 - EQUALS:
    lexeme: "="
 - EQUALS_EQUALS:
    lexeme: "=="
 - NE:
    lexeme: "!="
 - QE:
    lexeme: "?="
 - LT:
    lexeme: "<"
 - GT:
    lexeme: ">"
 - LE:
    lexeme: "<="
 - GE:
    lexeme: ">="
 - PLUS:
    lexeme: "+"
 - MINUS:
    lexeme: "-"
 - STAR:
    lexeme: "*"
 - SLASH:
    lexeme: "/"
 - PCT:
    lexeme: "%"
 - CARET:
    lexeme: "^"
 - AMP:
    lexeme: "&"
 - PIPE:
    lexeme: "|"
 - TILDE:
    lexeme: "~"
 - EXCL:
    lexeme: "!"
 - PLUS_EQUALS:
    lexeme: "+="
 - MINUS_EQUALS:
    lexeme: "-="
 - STAR_EQUALS:
    lexeme: "*="
 - SLASH_EQUALS:
    lexeme: "/="
 - PCT_EQUALS:
    lexeme: "%="
 - CARET_EQUALS:
    lexeme: "^="
 - AMP_EQUALS:
    lexeme: "&="
 - PIPE_EQUALS:
    lexeme: "|="
 - GT_GT_EQUALS:
    lexeme: ">>="
 - LT_LT_EQUALS:
    lexeme: "<<="
 - PLUS_PLUS:
    lexeme: "++"
 - MINUS_MINUS:
    lexeme: "--"
 - STAR_STAR:
    lexeme: "**"
 - SLASH_SLASH:
    lexeme: "//"
 - AMP_AMP:
    lexeme: "&&"
 - LT_LT:
    lexeme: "<<"
 - GT_GT:
    lexeme: ">>"
 - L_ARROW:
    lexeme: "<-"
 - R_ARROW:
    lexeme: "->"
 - PIPE_PIPE:
    lexeme: "||"
 - COLON_COLON:
    lexeme: "::"
#  - DOT_DOT:
#     lexeme: ".."
 - DOT:
    lexeme: "."
 - COMMA:
    lexeme: ","
 - COLON:
    lexeme: ":"
 - SEMICOLON:
    lexeme: ";"
 - QUESTION:
    lexeme: "?"
 - POUND:
    lexeme: "#"
 - DOLLAR:
    lexeme: "$"
 - QUOTE:
    lexeme: "\""
 - APOSTROPHE:
    lexeme: "'"
 - BACKSLASH:
    lexeme: "\\\\"
 - BACKTICK:
    lexeme: "`"
 - UNDERSCORE:
    lexeme: "_"
 - BOF_:
    lexeme: "BOF"
 - EOF_:
    lexeme: "EOF"
keywords:
 - IF:
    lexeme: "if"
 - ELSE:
    lexeme: "else"
 - WHILE:
    lexeme: "while"
 - FOR:
    lexeme: "for"
 - DO:
    lexeme: "do"
 - RETURN:
    lexeme: "return"
 - BOOL:
    lexeme: "bool"
 - INT:
    lexeme: "int"
 - FLOAT:
    lexeme: "float"
 - DOUBLE:
    lexeme: "double"
 - LONG:
    lexeme: "long"
 - TRUE_:
    lexeme: "true"
 - FALSE_:
    lexeme: "false"
 - NONE_:
    lexeme: "none"
 - NULL_:
    lexeme: "NULL"
 - VOID:
    lexeme: "void"
 - NULLPTR:
    lexeme: "nullptr"
 - NEW:
    lexeme: "new"
 - DELETE:
    lexeme: "delete"
 - INCLUDE:
    lexeme: "include"
 - UNSIGNED:
    lexeme: "unsigned"
 - DEF:
    lexeme: "def"
 - FUNCTION:
    lexeme: "function"
 - VAR:
    lexeme: "var"
whitespace:
 - SPACE:
    description: "ascii 32"
 - TAB:
    description: "ascii 9"
 - NEWLINE:
    description: "ascii 10"
 - COMMENT:
    description: "the string \"//\" followed by all the characters up to and including the next newline"
 - MULTILINE_COMMENT:
    description: "all characters wrapped by the two strings \"/\\*\" and \"\\*/\""
nonterminalSymbols:
 - "globals"
 - "include"
 - "procedure"
 - "main"
 - "param"
 - "params"
 - "vtype"
 - "type"
 - "signedtype"
 - "dcl"
 - "dcls"
 - "statements"
 - "statement"
 - "elseifstatement"
 - "elsestatement"
 - "lvalue"
 - "string"
 - "expr"
 - "expr1"
 - "expr2"
 - "expr3"
 - "expr4"
 - "expr5"
 - "expr6"
 - "expr7"
 - "expr8"
 - "expr9"
 - "expr10"
 - "expr11"
 - "expr12"
 - "expr13"
 - "expr14"
 - "expr15"
 - "expr16"
 - "arglist"
 - "whitespace"
startSymbol: "globals"
productionRules:
 - "globals"
 - "globals include globals"
 - "globals procedure globals"
#  - "globals statement globals"
 - "include POUND INCLUDE LT ID GT"
 - "include POUND INCLUDE QUOTE ID QUOTE"
 - "procedure vtype ID LPAREN params RPAREN LBRACE statements RBRACE"
#  - "procedure DEF STR LPAREN params RPAREN LBRACE statements RBRACE"
 - "params"
 - "params dcl params"
 - "dcl vtype ID"
 - "dcl vtype ID EQUALS expr"
 - "vtype signedtype type"
 - "vtype signedtype type STAR"
 - "vtype signedtype type AMP"
 - "signedtype"
 - "signedtype UNSIGNED"
 - "type BOOL"
 - "type INT"
 - "type LONG"
 - "type LONG LONG"
 - "type DOUBLE"
 - "type FLOAT"
 - "type ID"
 - "type VOID"
 - "statements"
 - "statements statements statement"
 - "statement dcl SEMICOLON"
 - "statement IF LPAREN expr RPAREN LBRACE statements RBRACE elseifstatement elsestatement"
 - "elseifstatement"
 - "elseifstatement ELSE IF LPAREN expr RPAREN LBRACE statements RBRACE elseifstatement"
 - "elsestatement"
 - "elsestatement ELSE LBRACE statements RBRACE"
 - "statement RETURN expr SEMICOLON"
 - "expr expr16"
 - "expr1 factor"
 - "expr1 lvalue"
 - "expr1 ID COLON_COLON expr1"
 - "expr2 expr1"
 - "expr2 LPAREN expr RPAREN"
 - "expr2 expr2 PLUS_PLUS"
 - "expr2 expr2 MINUS_MINUS"
 - "expr2 ID LPAREN RPAREN"
 - "expr2 ID LPAREN arglist RPAREN"
 - "expr2 ID LSQUARE expr RSQUARE"
 - "expr2 ID LSQUARE expr COLON expr RSQUARE"
 - "expr2 QUOTE string QUOTE"
 - "expr2 ID QUOTE string QUOTE"
 - "expr2 expr2 DOT expr2"
 - "expr2 expr2 DOT expr2 LPAREN RPAREN"
 - "expr2 expr2 DOT expr2 LPAREN arglist RPAREN"
 - "expr2 expr2 R_ARROW expr1"
 - "expr2 expr2 L_ARROW expr1"
 - "expr3 expr2"
 - "expr3 PLUS_PLUS expr2"
 - "expr3 MINUS_MINUS expr2"
 - "expr3 PLUS expr2"
 - "expr3 MINUS expr2"
 - "expr3 EXCL expr2"
 - "expr3 TILDE expr2"
 - "expr3 STAR expr2"
 - "expr3 AMP expr2"
 - "expr4 expr3"
 - "expr4 expr4 STAR_STAR expr3"
 - "expr5 expr4"
 - "expr5 expr5 STAR expr4"
 - "expr5 expr5 SLASH expr4"
 - "expr6 expr5"
 - "expr6 expr6 PLUS expr5"
 - "expr6 expr6 MINUS expr5"
 - "expr7 expr6"
 - "expr7 expr7 GT_GT expr6"
 - "expr7 expr7 LT_LT expr6"
 - "expr8 expr7"
 - "expr9 expr8"
 - "expr9 expr9 GT expr8"
 - "expr9 expr9 LT expr8"
 - "expr9 expr9 GE expr8"
 - "expr9 expr9 LE expr8"
 - "expr10 expr9"
 - "expr10 expr10 EQUALS_EQUALS expr9"
 - "expr10 expr10 NE expr9"
 - "expr10 expr10 QE expr9"
 - "expr11 expr10"
 - "expr11 expr11 AMP expr10"
 - "expr12 expr11"
 - "expr12 expr12 CARET expr11"
 - "expr13 expr12"
 - "expr13 expr13 PIPE expr12"
 - "expr14 expr13"
 - "expr14 expr14 AMP_AMP expr13"
 - "expr15 expr14"
 - "expr15 expr15 PIPE_PIPE expr14"
 - "expr16 expr15"
 - "expr16 lvalue EQUALS expr15"
 - "expr16 lvalue PLUS_EQUALS expr15"
 - "expr16 lvalue MINUS_EQUALS expr15"
 - "expr16 lvalue STAR_EQUALS expr15"
 - "expr16 lvalue SLASH_EQUALS expr15"
 - "expr16 lvalue PCT_EQUALS expr15"
 - "expr16 lvalue GT_GT_EQUALS expr15"
 - "expr16 lvalue LT_LT_EQUALS expr15"
 - "expr16 lvalue AMP_EQUALS expr15"
 - "expr16 lvalue CARET_EQUALS expr15"
 - "expr16 lvalue PIPE_EQUALS expr15"
 - "factor NUM"
 - "factor NONE_"
 - "factor NULLPTR"
 - "factor TRUE_"
 - "factor FALSE_"
 - "factor ID"
 - "arglist expr"
 - "arglist expr COMMA arglist"
 - "string"
 - "string ID"
 - "string STR"
 - "lvalue ID"
 - "lvalue STAR expr2"
 - "lvalue LPAREN lvalue RPAREN"
 
